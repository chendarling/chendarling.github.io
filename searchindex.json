[{"section":"Blog","slug":"/blog/post-alg-tree_arr/","title":"BUGAWAY算法小抄-树状数组","description":"this is meta description","date":"March 18, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blogs/alg_logo_hu_a0b5d177c561ea76.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"202\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blogs\\/alg_logo_hu_edb9469d6f833301.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blogs/alg_logo_hu_5a3cc60eb3ef125d.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blogs\\/alg_logo_hu_13ed667b8d61b2a5.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"算法小抄","tags":"算法小抄, 树状数组","content":"什么是树状数组？ 树状数组是支持单点修改和区间查询的、代码量小的数据结构。\n事实上，树状数组能解决的问题是线段树（一棵二叉树，每个节点表示一个区间，并存储该区间的一些相关信息。线段树可以高效地进行区间查询和区间更新操作。不是本文重点）能解决的问题的子集：树状数组能做的，线段树一定能做；线段树能做的，树状数组不一定可以。然而，树状数组的代码要远比线段树短，时间效率常数也更小，因此仍有学习价值。\n有时，在差分数组和辅助数组的帮助下，树状数组还可解决更强的区间加单点值和区间加区间和问题。\n举个栗子🌰，想知道a[1,\u0026hellip;,7]的前缀和，怎么做？\n一种方法就是将所有数都加起来。但如果已知三个数 A，B，C，A=a[1,\u0026hellip;,4]，B=a[5,\u0026hellip;,6]，C=a[7,\u0026hellip;,7]。求和只需要 A + B + C 。\n这就是树状数组能快速求解信息的原因：我们总能将一段前缀拆成 不多于logn 段区间，使得这 logn 段区间的信息是 已知的。于是，我们只要合并这些段区间的信息，就可以得到答案，相比于原先直接合并 n 个元素，效率有了很大提升。\n直接上结论，不难发现，c[x]管辖的一定是==[x - lowbit(x)+1, x]==的区间总信息。如c[88]管辖的是[88-8+1,\u0026hellip;,88]即[81,\u0026hellip;,88]的区域（$88_{(10)}$=$1011000_{(2)}$，因此 lowbit(88) = $1000_{(2)}$=8）。\n⚠️注意：lowbit 指的不是x 的最低位1 所在的位数 k，而是这个 1 和其后面的 0 所组成的 $2^k$。\nlowbit 对应代码为：\npublic int lowbit(int x){ // x 的二进制中，最低位的 1 以及后面所有 0 组成的数。 // lowbit(0b01011000) == 0b00001000 // ~~~~^~~~ // lowbit(0b01110010) == 0b00000010 // ~~~~~~^~ return x \u0026amp; -x; } 树状数组有两大核心功能：\n单点更新 update(i, v)： 把序列 i 位置的数加上一个值 v； 区间查询 query(i)： 查询序列 [1⋯i] 区间的区间和，即 i 位置的前缀和； 修改和查询的时间代价都是 O(logn)，其中 n 为需要维护前缀和的序列的长度。\nOK，我们不扯长篇大论，以练促学，接下来我们实操一下！💪\n实践 【板子题】307. 区域和检索 - 数组可修改 class NumArray { private int[] nums; // 基础数组 private int[] tree; // 树状数组，功能是单点修改和区间查询。下标表示右边界。 public void add(int index, int val) { // 单点修改，把序列第 index 个数增加 val // 为保证效率，我们只需遍历并修改管辖了 a[index]的 tree[y]，其他的 tree 没有明显变化 // 管辖 a[index]的 tree[y] 一定包含tree[index]。所以 y 在形态上是 index 的祖先 // 因此我们从 index 开始不断往上跳父亲，直到超出数组边界 while (index \u0026lt; tree.length) { tree[index] += val; index += lowbit(index); } } public int prefixSum(int index) { // 区间查询，查询前 index 个元素的前缀和 int sum = 0; while (index \u0026gt; 0) { sum += tree[index]; index -= lowbit(index); } return sum; } public NumArray(int[] nums) { this.tree = new int[nums.length + 1]; this.nums = nums; for (int i = 0; i \u0026lt; nums.length; i++) { add(i + 1, nums[i]); } } public void update(int index, int val) { add(index + 1, val - nums[index]); nums[index] = val; } public int sumRange(int left, int right) { return prefixSum(right + 1) - prefixSum(left); } // lowbit 函数计算区间管辖的左边界 public int lowbit(int x) { return x \u0026amp; -x; } } 【离散化树状数组】315. 计算右侧小于当前元素的个数 class Solution { int[] a; // 原始数组 int[] c; // 树状数组 public List\u0026lt;Integer\u0026gt; countSmaller(int[] nums) { // 离散化+ 树状数组 // 离散化的目的是因为“把原序列的值域映射到一个连续的整数区间，并保证它们的偏序关系不变。“ List\u0026lt;Integer\u0026gt; resultList = new ArrayList\u0026lt;\u0026gt;(); discretization(nums); init(nums.length); for(int i = nums.length -1; i \u0026gt;= 0; i--){ int id = getId(nums[i]); // 离散化之后相当于id 为 nums[i]在 nums 中第 id 小的元素 resultList.add(query(id-1)); // id-1是因为不包括 id 的个数 update(id); } Collections.reverse(resultList); return resultList; } public void init(int length){ c = new int[length]; Arrays.fill(c,0); } public int lowbit(int x){ return x \u0026amp; -x; } public int query(int pos){ // 范围查询 int ret = 0; while(pos \u0026gt; 0){ ret += c[pos]; pos -= lowbit(pos); } return ret; } public void update(int pos) { // 单点更新 while( pos \u0026lt; c.length){ c[pos] += 1; pos += lowbit(pos); } } // 离散化操作 public void discretization(int[] nums){ Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;Integer\u0026gt;(); for(int num: nums){ set.add(num); } int size = set.size(); // 有 size 个不一样的数 a = new int[size]; int index = 0; for(int num: set){ a[index++] = num; } Arrays.sort(a); } public int getId(int x){ return Arrays.binarySearch(a,x) + 1; } } 解释：\n过程如下：\n【离散化树状数组】493. 翻转对 "},{"section":"Blog","slug":"/blog/post-template/","title":"如何在该网站中撰写文章-模板🤔","description":"this is meta description","date":"March 18, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blogs/post-template/shutterstock_hu_6f9034a2ae606b3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"280\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blogs\\/post-template\\/shutterstock_hu_3069ac1a86865f9a.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blogs/post-template/shutterstock_hu_e56fa6b7688b46a7.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blogs\\/post-template\\/shutterstock_hu_31c2e04c64069ee3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"模板","tags":"模板","content":"正文内容 文章形式是基于MarkDown格式的，在blog目录下创建md格式文件即可，文件命名无要求。格式参照该文章源文件格式即可。\n参考：如何使用Hugo搭建博客并发布\nElements Here is an example of headings. You can use this heading by the following markdown rules. For example: use # for heading 1 and use ###### for heading 6.\nHeading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis The emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nThe combined emphasis with asterisks and underscores.\nStrike through uses two tildes. Scratch this.\nButton Button Link I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nOrdered List List item List item List item List item List item Unordered List List item List item List item List item List item Notice Note\nThis is a simple note.\nTip\nThis is a simple tip.\nInfo\nThis is a simple info.\nWarning\nThis is a simple warning.\nTab Tab 1 Tab 2 Tab 3 Hey There, I am a tab Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nI wanna talk about the assassination attempt Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nWe know you’re dealing in stolen ore Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo\nAccordions Why should you need to do this? Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur How can I adjust Horizontal centering Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur Should you use Negative margin? Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur Code and Syntax Highlighting This is an Inline code sample.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s 1#include \u0026lt;stdio.h\u0026gt; 2 3int main(void) 4{ 5 printf(\u0026#34;hello, world\\n\u0026#34;); 6 return 0; 7} flowchart TD A[Start] --\u0026gt; B{Is it?} B -- Yes --\u0026gt; C[OK] C --\u0026gt; D[Rethink] D --\u0026gt; B B -- No ----\u0026gt; E[End] Blockquote Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once.\nTables Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Image Gallery Slider Youtube video Custom video Your browser does not support the video tag. "}]